<?xml version="1.0" encoding="UTF-8"?>
<model version="5.3.0" links="0">
 <documentation>About this example:
-------------------
Simple &quot;Blinky&quot; console application for workstations (Windows, Linux, macOS)
(see &quot;QM Tutorial&quot; at: https://www.state-machine.com/qm/gs_tut.html)

This example demonstrates:
- Active object (Blinky) with state machine
- Board Support Package abstraction for portability
- BSP implementation for desktop OS (Windows, Linux, MacOS)
- Platform-independent main() function
- Makefile to build the generated code on desktop OS (Windows, Linux, MacOS)
- Customized tools for building the generated code directly from QM

Building the example:
---------------------
To build this example, you will need the QP/C++ framework installed on your computer and the GNU-GCC compiler, which you can get by installing the QP-bundle from:

https://www.state-machine.com/#Downloads

Running the example:
--------------------
This example is a simple console application, which you can run from a terminal.

For more QM examples for QP/C++ see:
https://www.state-machine.com/qpcpp/exa.html</documentation>
 <framework name="qpcpp"/>
 <package name="AOs" stereotype="0x02">
  <class name="ButtonBlink" superclass="qpcpp::QActive">
   <attribute name="m_timeEvt" type="QP::QTimeEvt" visibility="0x02" properties="0x00"/>
   <attribute name="init" type="ButtonBlinkInit_t" visibility="0x02" properties="0x00"/>
   <attribute name="color" type="APP::LedHandler::Colors_t" visibility="0x02" properties="0x00">
    <code>= APP::LedHandler::Red;</code>
   </attribute>
   <operation name="ButtonBlink" type="" visibility="0x00" properties="0x00">
    <documentation>Blinky constructor</documentation>
    <parameter name="_init" type="ButtonBlinkInit_t&amp;"/>
    <code>  : QActive(Q_STATE_CAST(&amp;ButtonBlink::initial)),
    m_timeEvt(this, TIMEOUT_SIG, 0U),
    init(_init)
</code>
   </operation>
   <operation name="ChangeMode" type="void" visibility="0x00" properties="0x00">
    <parameter name="color" type="APP::LedHandler::Colors_t"/>
    <parameter name="caller" type="QP::QActive*"/>
    <code>ChangeModeEvt *evt = Q_NEW(ChangeModeEvt, CHANGE_MODE_SIG);
evt-&gt;color = color;
this-&gt;POST(evt,caller);</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1/1">
     <action>// arm the private time event to expire in 1/2s
// and periodically every 1/2 second
m_timeEvt.armX( BSP::TICKS_PER_SEC,
                BSP::TICKS_PER_SEC);
(void)e; // unused parameter</action>
     <initial_glyph conn="2,3,5,1,20,5,-4">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="buttonSensitiveState">
     <tran trig="CHANGE_MODE">
      <action>const ChangeModeEvt* _evt = Q_EVT_CAST(ChangeModeEvt);
if(_evt-&gt;color == APP::LedHandler::Red)
{
    TRACE_BUTTON_BLINK(&quot;Red&quot;);
    color = APP::LedHandler::Red;
    init.ledHandler-&gt;LedControl(APP::LedHandler::Green, 0);
}
else if(_evt-&gt;color == APP::LedHandler::Green)
{
    TRACE_BUTTON_BLINK(&quot;Green&quot;);
    color = APP::LedHandler::Green;
    init.ledHandler-&gt;LedControl(APP::LedHandler::Red, 0);
}
</action>
      <tran_glyph conn="40,15,1,-1,-17">
       <action box="-16,-2,16,2"/>
      </tran_glyph>
     </tran>
     <state name="off">
      <entry>TRACE_BUTTON_BLINK(&quot;EnterOff&quot;);
init.ledHandler-&gt;LedControl(color, 0);</entry>
      <tran trig="TIMEOUT" target="../../2">
       <tran_glyph conn="2,15,3,1,18,7,-2">
        <action box="0,-2,8,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="2,6,16,12">
       <entry box="1,2,12,4"/>
      </state_glyph>
     </state>
     <state name="on">
      <entry>TRACE(&quot;EnterOn&quot;);
init.ledHandler-&gt;LedControl(color, 1);</entry>
      <tran trig="TIMEOUT" target="../../1">
       <tran_glyph conn="2,30,3,1,20,-19,-4">
        <action box="0,-2,8,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="2,20,16,12">
       <entry box="1,2,12,4"/>
      </state_glyph>
     </state>
     <state_glyph node="1,4,39,30"/>
    </state>
    <state_diagram size="43,37"/>
   </statechart>
  </class>
  <class name="ChangeModeEvt" superclass="qpcpp::QEvt">
   <attribute name="color" type="APP::LedHandler::Colors_t" visibility="0x00" properties="0x00"/>
   <operation name="ChangeModeEvt" type="" visibility="0x00" properties="0x00">
    <parameter name="_color" type="APP::LedHandler::Colors_t"/>
    <parameter name="sig" type="QP::QSignal"/>
    <code>: QEvt(sig),color(_color)</code>
   </operation>
  </class>
 </package>
 <directory name=".">
  <file name="AO_ButtonBlink.cpp">
   <text>
#include &quot;AO_ButtonBlink.hpp&quot;
#include &quot;Modules.h&quot;
#include &quot;BSP_DebugTrace.h&quot;

using namespace QP;
// use app as ao namespace
using namespace APP;



// opaque pointer to the Blinky active object --------------------------------
$define${AOs::ChangeModeEvt}
$define${AOs::ButtonBlink}

</text>
  </file>
  <file name="AO_ButtonBlink.hpp">
   <text>#ifndef AO_BLINKBUTTON_H
#define AO_BLINKBUTTON_H
#include &quot;LedHandler.hpp&quot;
#include &quot;qpcpp.hpp&quot; // QP/C++ framework API
#include &quot;Signals.hpp&quot;
#include &quot;BSP_QP.hpp&quot;

///@brief init struct for button blink AO
typedef struct ButtonBlinkInit_t
{
    APP::LedHandler* ledHandler;
}ButtonBlinkInit_t;
// ask QM to declare the Blinky class ----------------------------------------
$declare${AOs::ChangeModeEvt}
$declare${AOs::ButtonBlink}


#endif // BSP_HPP</text>
  </file>
 </directory>
</model>
