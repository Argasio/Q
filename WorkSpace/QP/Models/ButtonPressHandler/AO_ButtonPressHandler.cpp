//$file${.::AO_ButtonPressHandler.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: ButtonPressHandler.qm
// File:  ${.::AO_ButtonPressHandler.cpp}
//
// This code has been generated by QM 6.1.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::AO_ButtonPressHandler.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#include "AO_ButtonPressHandler.hpp"
#include "Modules.h"
#include "BSP_DebugTrace.h"

using namespace QP;
// use app as ao namespace
using namespace APP;



// opaque pointer to the Blinky active object --------------------------------
//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${AOs::ButtonPressHandler} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AO {

//${AOs::ButtonPressHandler} .................................................

//${AOs::ButtonPressHandl~::ButtonPressHandler} ..............................
ButtonPressHandler::ButtonPressHandler(ButtonPressHandlerInit_t _init)
  : QActive(Q_STATE_CAST(&ButtonPressHandler::initial)),
    m_timeEvt(this, TIMEOUT_SIG, 0U),
    init(_init)

{}

//${AOs::ButtonPressHandl~::ButtonEvent} .....................................
void ButtonPressHandler::ButtonEvent(
    QP::QActive* sender,
    std::uint8_t level)
{
    if(level)
    {
        QP::QEvt *evt = Q_NEW(QP::QEvt, BTN_PRESS_UP_SIG);
        this->POST(evt, sender);
    }
    else
    {
        QP::QEvt *evt = Q_NEW(QP::QEvt, BTN_PRESS_DOWN_SIG);
        this->POST(evt, sender);
    }

}

//${AOs::ButtonPressHandl~::SM} ..............................................
Q_STATE_DEF(ButtonPressHandler, initial) {
    //${AOs::ButtonPressHandl~::SM::initial}

    (void)e; // unused parameter

    QS_FUN_DICTIONARY(&ButtonPressHandler::buttonSensitiveState);
    QS_FUN_DICTIONARY(&ButtonPressHandler::idle);
    QS_FUN_DICTIONARY(&ButtonPressHandler::firstPress);
    QS_FUN_DICTIONARY(&ButtonPressHandler::longPress);

    return tran(&idle);
}

//${AOs::ButtonPressHandl~::SM::buttonSensitiveState} ........................
Q_STATE_DEF(ButtonPressHandler, buttonSensitiveState) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${AOs::ButtonPressHandl~::SM::buttonSensitiveS~::idle} .....................
Q_STATE_DEF(ButtonPressHandler, idle) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::ButtonPressHandl~::SM::buttonSensitiveS~::idle}
        case Q_ENTRY_SIG: {
            TRACE_BUTTON_PRESS_HANDLER("Idle");
            m_timeEvt.disarm();
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::ButtonPressHandl~::SM::buttonSensitiveS~::idle::BTN_PRESS_DOWN}
        case BTN_PRESS_DOWN_SIG: {
            // arm the private time event to expire in 1/2s
            // and periodically every 1/2 second
            m_timeEvt.armX( BSP::TICKS_PER_SEC,
                            0);
            status_ = tran(&firstPress);
            break;
        }
        default: {
            status_ = super(&buttonSensitiveState);
            break;
        }
    }
    return status_;
}

//${AOs::ButtonPressHandl~::SM::buttonSensitiveS~::firstPress} ...............
Q_STATE_DEF(ButtonPressHandler, firstPress) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::ButtonPressHandl~::SM::buttonSensitiveS~::firstPress}
        case Q_ENTRY_SIG: {
            TRACE_BUTTON_PRESS_HANDLER("PressBegin");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::ButtonPressHandl~::SM::buttonSensitiveS~::firstPress::TIMEOUT}
        case TIMEOUT_SIG: {
            TRACE_BUTTON_PRESS_HANDLER("ShortPressTimeout");
            status_ = tran(&longPress);
            break;
        }
        //${AOs::ButtonPressHandl~::SM::buttonSensitiveS~::firstPress::BTN_PRESS_UP}
        case BTN_PRESS_UP_SIG: {
            TRACE_BUTTON_PRESS_HANDLER("ShortPress");
            AO_ButtonPressHandlerCallback(ShortPress, this);
            status_ = tran(&idle);
            break;
        }
        default: {
            status_ = super(&buttonSensitiveState);
            break;
        }
    }
    return status_;
}

//${AOs::ButtonPressHandl~::SM::buttonSensitiveS~::longPress} ................
Q_STATE_DEF(ButtonPressHandler, longPress) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::ButtonPressHandl~::SM::buttonSensitiveS~::longPress}
        case Q_ENTRY_SIG: {
            TRACE_BUTTON_PRESS_HANDLER("LongPress");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::ButtonPressHandl~::SM::buttonSensitiveS~::longPress::BTN_PRESS_UP}
        case BTN_PRESS_UP_SIG: {
            TRACE_BUTTON_PRESS_HANDLER("LongPressRelease");
            AO_ButtonPressHandlerCallback(LongPress, this);
            status_ = tran(&idle);
            break;
        }
        default: {
            status_ = super(&buttonSensitiveState);
            break;
        }
    }
    return status_;
}

} // namespace AO
//$enddef${AOs::ButtonPressHandler} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// weak callbacks
__attribute__((__weak__)) void AO_ButtonPressHandlerCallback(AO_ButtonPressHandlerEvt_t evt, QP::QActive* caller){}
